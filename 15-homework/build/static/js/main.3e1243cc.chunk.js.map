{"version":3,"sources":["components/Post/Post.module.scss","components/Header/Header.module.scss","components/PostList/PostList.module.scss","components/Header/Header.js","components/Icon/Icon.js","components/Post/Post.js","components/PostList/PostList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","s","header","headerShadow","Icon","style","fill","width","viewBox","height","xmlns","xmlnsXlink","d","Post","author","content","image","date","comments","authorImgStyle","backgroundImage","photo","card","cardAuthor","cardAuthorImg","cardAuthorMeta","cardAuthorName","name","cardAuthorNick","nickname","itemProp","dateTime","cardTitle","cardImg","src","alt","cardComments","ANAKIN_IMAGE","postsList","PostList","cardList","map","post","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kGACAA,EAAOC,QAAU,CAAC,KAAO,mBAAmB,WAAa,yBAAyB,cAAgB,4BAA4B,eAAiB,6BAA6B,eAAiB,6BAA6B,eAAiB,6BAA6B,UAAY,wBAAwB,QAAU,sBAAsB,aAAe,6B,gBCA3VD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,aAAe,+B,kBCAjED,EAAOC,QAAU,CAAC,SAAW,6B,uJCYdC,EATA,WACb,OACE,yBAAKC,UAAWC,IAAEC,QAChB,0BAAMF,UAAWC,IAAEE,cAAnB,QACA,4C,gCCgBSC,EAtBF,SAAC,GAAD,QACXC,aADW,MACH,GADG,MAEXC,YAFW,MAEJ,UAFI,MAGXC,aAHW,MAGH,OAHG,MAIXP,iBAJW,MAIC,GAJD,MAKXQ,eALW,MAKD,sBALC,SAOX,yBACED,MAAOA,EACPF,MAAOA,EACPI,OAAQF,EACRC,QAASA,EACTE,MAAM,6BACNV,UAAS,mBAAcA,GAAa,IACpCW,WAAW,gCAEX,2BAAG,2BAAG,2BACJ,0BAAMC,EAAE,o4BAAo4BN,KAAMA,SCUz4BO,EAvBF,SAAC,GAA8C,IAA7CC,EAA4C,EAA5CA,OAAQC,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,SACrCC,EAAiB,CACrBC,gBAAgB,OAAD,OAASN,EAAOO,MAAhB,MAGjB,OACE,6BAASrB,UAAWC,IAAEqB,MACpB,yBAAKtB,UAAWC,IAAEsB,YAChB,yBAAKvB,UAAWC,IAAEuB,cAAenB,MAAOc,IACxC,yBAAKnB,UAAWC,IAAEwB,gBAChB,0BAAMzB,UAAWC,IAAEyB,gBAAiBZ,EAAOa,KAA3C,IAAiD,0BAAM3B,UAAWC,IAAE2B,gBAAiBd,EAAOe,WAC5F,0BAAMC,SAAS,gBAAgBC,SAAS,UAAUd,KAGtD,gCACE,wBAAIjB,UAAWC,IAAE+B,UAAWF,SAAS,YAAYf,IAEnD,yBAAKf,UAAWC,IAAEgC,QAASC,IAAKlB,EAAOmB,IAAI,KAC3C,yBAAKnC,UAAWC,IAAEmC,cAAc,kBAAC,EAAD,CAAM7B,MAAO,KAAOW,KClBpDmB,EAAe,6FAGfC,EAAY,CAChB,CACExB,OAAQ,CACNa,KAAM,mBACNN,MAAOgB,EACPR,SAAU,eAEZd,QAAS,kDACTC,MAAO,gGACPC,KAAM,+BACNC,SAAU,GAEZ,CACEJ,OAAQ,CACNa,KAAM,mBACNN,MAAOgB,EACPR,SAAU,eAEZd,QAAS,oCACTC,MAAO,gGACPC,KAAM,+BACNC,SAAU,KAcCqB,EAVE,WACf,OACE,oCACE,yBAAKvC,UAAWC,IAAEuC,UACdF,EAAUG,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAASA,SCxB3BC,MATf,WACE,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3e1243cc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Post_card__1DnRe\",\"cardAuthor\":\"Post_cardAuthor__1LyYj\",\"cardAuthorImg\":\"Post_cardAuthorImg__3ILbv\",\"cardAuthorMeta\":\"Post_cardAuthorMeta__FaULX\",\"cardAuthorName\":\"Post_cardAuthorName__3pGnv\",\"cardAuthorNick\":\"Post_cardAuthorNick__5wUVv\",\"cardTitle\":\"Post_cardTitle__1yd5n\",\"cardImg\":\"Post_cardImg__1nLQE\",\"cardComments\":\"Post_cardComments__1snSG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1v0yI\",\"headerShadow\":\"Header_headerShadow__T-cwD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardList\":\"PostList_cardList__kClMn\"};","import React from 'react';\n\nimport s from './Header.module.scss';\n\nconst Header = () => {\n  return (\n    <div className={s.header}>\n      <span className={s.headerShadow}>blog</span>\n      <h1>Blog Posts</h1>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nconst Icon = ({\n  style = {},\n  fill = \"#ffffff\",\n  width = \"100%\",\n  className = \"\",\n  viewBox = \"0 0 511.072 511.072\"\n}) => (\n  <svg\n    width={width}\n    style={style}\n    height={width}\n    viewBox={viewBox}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    className={`svg-icon ${className || \"\"}`}\n    xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n  >\n    <g><g><g>\n      <path d=\"m74.39 480.536h-36.213l25.607-25.607c13.807-13.807 22.429-31.765 24.747-51.246-36.029-23.644-62.375-54.751-76.478-90.425-14.093-35.647-15.864-74.888-5.121-113.482 12.89-46.309 43.123-88.518 85.128-118.853 45.646-32.963 102.47-50.387 164.33-50.387 77.927 0 143.611 22.389 189.948 64.745 41.744 38.159 64.734 89.63 64.734 144.933 0 26.868-5.471 53.011-16.26 77.703-11.165 25.551-27.514 48.302-48.593 67.619-46.399 42.523-112.042 65-189.83 65-28.877 0-59.01-3.855-85.913-10.929-25.465 26.123-59.972 40.929-96.086 40.929zm182-420c-124.039 0-200.15 73.973-220.557 147.285-19.284 69.28 9.143 134.743 76.043 175.115l7.475 4.511-.23 8.727c-.456 17.274-4.574 33.912-11.945 48.952 17.949-6.073 34.236-17.083 46.99-32.151l6.342-7.493 9.405 2.813c26.393 7.894 57.104 12.241 86.477 12.241 154.372 0 224.682-93.473 224.682-180.322 0-46.776-19.524-90.384-54.976-122.79-40.713-37.216-99.397-56.888-169.706-56.888z\" fill={fill}/>\n    </g></g></g>\n  </svg>\n);\n\nexport default Icon;\n","import React from 'react';\n\nimport s from './Post.module.scss';\n\nimport Icon from '../Icon/Icon';\n\nconst Post = ({author, content, image, date, comments}) => {\n  const authorImgStyle = {\n    backgroundImage: `url(${author.photo})`\n  }\n\n  return (\n    <article className={s.card}>\n      <div className={s.cardAuthor}>\n        <div className={s.cardAuthorImg} style={authorImgStyle}></div>\n        <div className={s.cardAuthorMeta}>\n          <span className={s.cardAuthorName}>{author.name} <span className={s.cardAuthorNick}>{author.nickname}</span></span>\n          <time itemProp=\"datePublished\" dateTime=\"{date}\">{date}</time>\n        </div>\n      </div>\n      <header>\n        <h3 className={s.cardTitle} itemProp=\"headline\">{content}</h3>\n      </header>\n      <img className={s.cardImg} src={image} alt=\"\"/>\n      <div className={s.cardComments}><Icon width={18} />{comments}</div>\n    </article>\n  );\n}\n\nexport default Post;\n","import React from 'react';\n\nimport s from './PostList.module.scss';\n\nimport Post from '../Post/Post';\n\nconst ANAKIN_IMAGE = \"https://upload.wikimedia.org/wikipedia/en/thumb/7/74/Anakin-Jedi.jpg/220px-Anakin-Jedi.jpg\";\n// const RAY_IMAGE = \"https://specials-images.forbesimg.com/imageserve/5e63b3c8e1e617000759130e/960x0.jpg?fit=scale\";\n\nconst postsList = [\n  {\n    author: {\n      name: \"Anakin skywalker\",\n      photo: ANAKIN_IMAGE,\n      nickname: \"@dart_vader\",\n    },\n    content: \"WTF? Who is Ray? Why she is Skywalker? Luke...?\",\n    image: \"https://specials-images.forbesimg.com/imageserve/5e63b3c8e1e617000759130e/960x0.jpg?fit=scale\",\n    date: \"26 февр.\",\n    comments: 4,\n  },\n  {\n    author: {\n      name: \"Anakin skywalker\",\n      photo: ANAKIN_IMAGE,\n      nickname: \"@dart_vader\",\n    },\n    content: \"Hello guys! Where are you now...?\",\n    image: \"https://specials-images.forbesimg.com/imageserve/5d65b894fead2800089255b0/960x0.jpg?fit=scale\",\n    date: \"12 март.\",\n    comments: 13,\n  }\n];\n\nconst PostList = () => {\n  return (\n    <>\n      <div className={s.cardList}>\n        { postsList.map(post => <Post {...post} />) }\n      </div>\n    </>\n  );\n}\n\nexport default PostList;\n","import React from 'react';\n\nimport Header from './components/Header/Header';\nimport PostList from './components/PostList/PostList';\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <PostList />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}